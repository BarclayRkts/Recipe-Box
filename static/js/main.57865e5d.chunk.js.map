{"version":3,"sources":["NewForm.js","Recipe.js","Box.js","DisplayAll.js","App.js","serviceWorker.js","index.js"],"names":["NewForm","props","state","name","ingredients","instructions","image","visible","handleChange","bind","handleSubmit","evt","preventDefault","this","setState","target","value","createRecipe","id","uuidv4","toggle","onSubmit","className","onClick","type","onChange","Component","Recipe","exit","isEditing","recipe","ingridents","handleRemove","toggleForm","handleUpdate","removeRecipe","updateRecipe","onClose","src","alt","Box","handleClick","key","DisplayAll","recipes","create","handleExit","remove","update","newRecipe","alert","filter","t","updatedRecipe","updatedRecipes","map","index","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.57865e5d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './NewForm.css';\r\n\r\n\r\nclass NewForm extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            name: '',\r\n            ingredients: '',\r\n            instructions: '',\r\n            image: '',\r\n            visible: ''\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    handleChange(evt){\r\n        // console.log('changing')\r\n        evt.preventDefault();\r\n        this.setState({\r\n            [evt.target.name] : evt.target.value\r\n        })\r\n    }\r\n    handleSubmit(evt){\r\n        evt.preventDefault();\r\n        // alert('submit');\r\n        this.props.createRecipe({...this.state, id: uuidv4()});\r\n        this.props.toggle();\r\n        this.setState({\r\n            name: '',\r\n            ingredients: '',\r\n            instructions: '',\r\n            image: ''\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <button className='toggleBtn' onClick={this.props.toggle} type='button'>X</button>\r\n                    \r\n                    <h3>Add Recipe</h3>\r\n\r\n                    <div className='inputContainer'>\r\n                        <label>Recipe Name *</label>\r\n                        <input\r\n                        className='inputBox name'\r\n                        name='name'\r\n                        value={this.state.name}\r\n                        onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className='inputContainer'>\r\n                        <label>Ingredients *</label>\r\n                        <textarea\r\n                        className='inputBox ingredients'\r\n                        name='ingredients'\r\n                        value={this.state.ingredients}\r\n                        onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className='inputContainer'>\r\n                        <label>Instructions *</label>\r\n                        <textarea\r\n                        className='inputBox instructions'\r\n                        name='instructions'\r\n                        value={this.state.instructions}\r\n                        onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className='inputContainer'>\r\n                        <label>Image URL (optional) *</label>\r\n                        <input\r\n                        className='inputBox imageURL'\r\n                        name='image'\r\n                        value={this.state.image}\r\n                        onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <button>Add Recipe</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewForm;","import React, { Component } from 'react';\r\nimport './Recipe.css';\r\n\r\nclass Recipe extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            exit: false,\r\n            isEditing: false,\r\n            recipe: this.props.recipe,\r\n            ingridents: this.props.ingridents,\r\n            image: this.props.image,\r\n            instructions: this.props.instructions\r\n        }\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleRemove(){\r\n        this.props.removeRecipe(this.props.id)\r\n    }\r\n    toggleForm(){\r\n        this.setState({\r\n            isEditing: !this.state.isEditing\r\n        })\r\n    }\r\n    handleUpdate(evt){\r\n        evt.preventDefault();\r\n        this.props.updateRecipe(this.props.id, this.state.ingridents)\r\n        this.setState({\r\n            isEditing: false\r\n        })\r\n    }\r\n    handleChange(evt){\r\n        // console.log('changing')\r\n        evt.preventDefault();\r\n        this.setState({\r\n            [evt.target.name] : evt.target.value\r\n        })\r\n        // console.log(`this in handle change : ${[evt.target.name]}`)\r\n    }\r\n    render() {\r\n        let result;\r\n        if(this.state.isEditing){\r\n            result = (\r\n                <div>\r\n                    <form onSubmit={this.handleUpdate}>\r\n\r\n                    <div className='inputContainer'>\r\n                        <label>Recipe Name *</label>\r\n                        <input  \r\n                        value={this.state.recipe} \r\n                        name='recipe' \r\n                        className='inputBox name'\r\n                        onChange={this.handleChange}/>\r\n                        </div>\r\n\r\n                        <div className='inputContainer'>\r\n                        <label>Ingredients *</label>\r\n                        <textarea\r\n                        className='inputBox ingredients'\r\n                        name='ingridents'\r\n                        value={this.state.ingridents}\r\n                        onChange={this.handleChange}\r\n                        />\r\n                        </div>\r\n\r\n                        <div className='inputContainer'>\r\n                        <label>Instructions *</label>\r\n                        <textarea\r\n                        className='inputBox instructions'\r\n                        name='instructions'\r\n                        value={this.state.instructions}\r\n                        onChange={this.handleChange}\r\n                        />\r\n                        </div>\r\n\r\n                        <div className='inputContainer'>\r\n                        <label>Image URL (optional) *</label>\r\n                        <input\r\n                        className='inputBox imageURL'\r\n                        name='image'\r\n                        value={this.state.image}\r\n                        onChange={this.handleChange}\r\n                        />\r\n                        </div>\r\n                        \r\n                        <button>Save</button>\r\n                        \r\n                    </form>\r\n                </div>\r\n            )\r\n        }else{\r\n            result = (\r\n            <div className='containerBox'>\r\n                <button className='exitBtn' onClick={this.props.onClose}>X</button>\r\n                <h1 className='title'>{this.props.recipe}</h1>\r\n                \r\n                <div className='ingridentsBox'>\r\n                    <h2>Ingridents</h2>\r\n                    <pre>{this.props.ingridents}</pre>\r\n                </div>\r\n\r\n                <div className='imageBox'>\r\n                    <img src={this.props.image} alt={this.props.recipe}/>\r\n                </div>\r\n                \r\n                <div className='instructionsBox'>\r\n                    <h2>Instructions</h2>\r\n                    <pre>{this.props.instructions}</pre>\r\n                </div>\r\n\r\n                <button onClick={this.handleRemove}>Delete</button>\r\n                {/*<button onClick={this.toggleForm}>Edit</button>*/}\r\n                \r\n            </div>\r\n            )\r\n        }\r\n        return result;\r\n        \r\n    }\r\n}\r\nexport default Recipe;","import React, { Component } from 'react';\r\nimport './Box.css';\r\nimport Recipe from './Recipe';\r\n\r\nexport default class Box extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            toggle: false\r\n        }\r\n        this.handleClick = this.handleClick.bind(this)\r\n    }\r\n    handleClick(){\r\n        this.setState({\r\n            toggle: !this.state.toggle,\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='imgBox'>\r\n\r\n                <img className='img' alt={this.props.name} src={this.props.image}/>\r\n\r\n                <div className='boxName'>{this.props.recipe}</div>\r\n\r\n                <button onClick={this.handleClick}>Open Recipe</button>\r\n\r\n                {this.state.toggle ?\r\n                    <Recipe key={this.props.id} onClose={this.handleClick} updateRecipe={this.props.updateRecipe} removeRecipe={this.props.removeRecipe} id={this.props.id} recipe={this.props.recipe} image={this.props.image} ingridents={this.props.ingridents} instructions={this.props.instructions}/>:\r\n                    null\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport NewForm from './NewForm';\r\nimport Data from './Data';\r\nimport Box from './Box';\r\nimport './DisplayAll.css';\r\n\r\nclass DisplayAll extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            recipes: [], \r\n            visible: true,\r\n            exit: ' '\r\n        }\r\n        this.create = this.create.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleExit = this.handleExit.bind(this);\r\n        this.remove = this.remove.bind(this);\r\n        this.update = this.update.bind(this);\r\n    }\r\n    create(newRecipe){\r\n        this.setState({\r\n            recipes: [...this.state.recipes, newRecipe]\r\n        })\r\n    }\r\n    handleClick(){\r\n        this.setState({\r\n            visible: !this.state.visible\r\n        })\r\n    }\r\n    handleExit(){\r\n        alert('child is exiting');\r\n    }\r\n    remove(id){\r\n        this.setState({\r\n            recipes: this.state.recipes.filter(t => t.id !== id)\r\n        });\r\n    }\r\n    update(id, updatedRecipe){\r\n        const updatedRecipes = this.state.recipes.map(recipe => {\r\n            if(recipe.id === id){\r\n                return { ...recipe, ingredients: updatedRecipe };\r\n            }\r\n            return recipe;\r\n        })\r\n        this.setState({recipes: updatedRecipes})\r\n    }\r\n    render() {\r\n        const recipes = this.state.recipes.map((recipe, index) => {\r\n            return (\r\n                <div>\r\n                    <Box key={recipe.id} updateRecipe={this.update} id={recipe.id} index={index} removeRecipe={this.remove} recipe={recipe.name} image={recipe.image} ingridents={recipe.ingredients} instructions={recipe.instructions} visible={true}/>\r\n                    {/*<Recipe key={recipe.id} id={recipe.id} recipe={recipe.name} image={recipe.image} ingridents={recipe.ingredients} instructions={recipe.instructions} visible={true}/>*/}\r\n                </div>\r\n            )\r\n        });\r\n        return (\r\n            <div className='container'>\r\n                <div >\r\n                    <h1 className='title'>Recipe App</h1>\r\n                    {this.state.visible ? null : <NewForm toggle={this.handleClick} createRecipe={this.create}/>}\r\n                    <button onClick={this.handleClick}>Add Recipe</button>\r\n\r\n                    <div>\r\n                        {recipes}\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DisplayAll","import React from 'react';\nimport './App.css';\nimport DisplayAll from './DisplayAll';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DisplayAll/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}